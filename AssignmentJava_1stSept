
 Design a class Book containing following members: 
bookID text 
title text 
author text 
category text 
price double
Define Parameterized constructor to initialize Book object. Perform the below validations 
• Category must be “Science”, “Fiction”, “Technology” or “Others” 
• Price cannot be negative 
• bookID must start with ‘B’ and must be of length 4 characters 

If any of the validations fail, throw an user defined exception InvalidBookException. 
Design a class called BookStore which contains an appropriate collection object to store Book instances. 
Implement the below operations. 
1. addBook(Book b)     To add a new Book object into the book table 
2. searchByTitle(String title)   Search a book from DB based on title and if found, display the details 
3. searchByAuthor(String author) Search a book from DB based on author and if found, display the details 
4. displayAll()  Print the details of all the books 
Store both classes in a package com.book. 
Create a class BookUtil in package com.bookutil which has the main method. 
• Instantiate the BookStore class 
• Read data from user for 3 Book objects. 
• Call the addBook method to add the book objects into the collection 
• Search the books by title and author 
• Display all the book details 



package com.book;

public class Book {
    private String bookId;
    private String title;
    private String category;
    private String author;
    private double price;

    public Book(String bookId, String title, String author, String category, double price){
        this.bookId = bookId;
        this.title=title;
        this.category=category;
        this.author=author;
        this.price=price;
    }

    public String getBookId() {
        return bookId;
    }

    public void setBookId(String bookId) {
        this.bookId = bookId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
    
    public String toString(Book b){
        return b.getBookId()+" "+b.getTitle()+" "+b.getAuthor()+" "+b.getCategory()+" "+b.getPrice();
    }
}



package com.book;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

public class Bookstore {

    private static String url="jdbc:mysql://localhost:3306/gainsight";

    public boolean addBook(Book b){
        int count=0;
        try (Connection con = DriverManager.getConnection(url, "root", "@Khushi00");
             PreparedStatement pst = con.prepareStatement("insert into book values(?,?,?,?,?)")) {
            if (b.getCategory().equals("Science") || b.getCategory().equals("Fiction") || b.getCategory().equals("Technology") || b.getCategory().equals("Others") && (b.getPrice() > 0) && (b.getBookId().charAt(0) == 'B' && b.getBookId().length() == 4)) {
                pst.setString(1, b.getBookId());
                pst.setString(2, b.getTitle());
                pst.setString(3, b.getAuthor());
                pst.setString(4, b.getCategory());
                pst.setDouble(5, b.getPrice());
                count=pst.executeUpdate();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return count==1;
    }

    public Book searchByTitle(String title)
    {
        Book b=null;

        try(Connection con = DriverManager.getConnection(url,"root","@Khushi00");
            PreparedStatement pst = con.prepareStatement("select * from Book where title=?");){

            pst.setString(1,title);
            ResultSet rs= pst.executeQuery();
            if(rs.next()){
                b=new Book(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getDouble(5));
            }

        }
        catch(Exception ex){
            ex.printStackTrace();
        }
        return b;
    }

    public Book searchByAuthor(String author)
    {
        Book b=null;

        try(Connection con = DriverManager.getConnection(url,"root","@Khushi00");
            PreparedStatement pst = con.prepareStatement("select * from book where author=?");){

            pst.setString(1,title);
            ResultSet rs= pst.executeQuery();
            if(rs.next()){
                b=new Book(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getDouble(5));
            }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
        return b;
    }

    public ArrayList<Book> getAllBooks(){
        ArrayList<Book> booklist = new ArrayList<>();

        try(Connection con = DriverManager.getConnection(url,"root","@Khushi00");
            PreparedStatement pst = con.prepareStatement("select * from book");){

            ResultSet rs= pst.executeQuery();
            while(rs.next()){
                booklist.add(new Book(rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getDouble(5)));
            }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
        return booklist;
    }

}


package com.bookutil;

import com.book.Book;
import com.book.Bookstore;

import java.util.ArrayList;
import java.util.Scanner;

class InvalidBookException extends RuntimeException{
    private String message = "Input is not valid";
    public InvalidBookException(){

    }
    public String toString(){
        return "InvalidBookException:" +"The data provided is wrong";
    }
}

public class BookUtil {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        Bookstore bookstore= new Bookstore();

        int i=0;
        while(i!=3){
            System.out.println("Enter book details to add a book");
            System.out.println("Enter Book's Id");
            String bookId= sc.next();
            System.out.println("Enter Book's Title");
            String title= sc.next();
            System.out.println("Enter Book's Author");
            String author= sc.next();
            System.out.println("Enter Book's Category");
            String category= sc.next();
            System.out.println("Enter Book's Price");
            double price= sc.nextDouble();

            Book b = new Book(bookId,title,author,category,price);

            boolean check= bookstore.addBook(b);
            if(!check)
                throw new InvalidBookException();
            i++;
        }

        System.out.println("Enter title to find the book details");
        String title=sc.next();
        Book b1=bookstore.searchByTitle(title);
        System.out.println(b1.toString());

        System.out.println("Enter author name to find the book details");
        String author=sc.next();
        Book b2=bookstore.searchByAuthor(author);
        System.out.println(b2.toString());

        ArrayList<Book> books=bookstore.getAllBooks();
        for(Book b3: books){
            System.out.println(b3.toString(b3));
        }
    }
}


